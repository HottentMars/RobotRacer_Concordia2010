#include <avr/io.h>
#include <util/delay.h>
#include <avr/signal.h>

//#include "lcd.h"

void InitADC()
{
ADMUX=(1<<REFS0);                           // For Aref=AVcc;

 ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading 

ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128

}

uint16_t ReadADC(uint8_t ch)
{
   //Select ADC Channel ch must be 0-7
   ch=ch&0b00000111;

   ADMUX|=ch;

   ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode 
   //Start Single conversion
   ADCSRA|=(1<<ADSC);

   //Wait for conversion to complete
   //while(!(ADCSRA & (1<<ADIF)));

   //Clear ADIF by writing one to it
   //Note you may be wondering why we have write one to clear it
   //This is standard way of clearing bits in io as said in datasheets.
   //The code writes '1' but it result in setting bit to '0' !!!

   //ADCSRA|=(1<<ADIF);

   return(ADCH);
}

void Wait()
{
   uint8_t i;
   for(i=0;i<20;i++)
      _delay_loop_2(0);
}

void main()
{
   uint16_t adc_result;
   DDRB |= (1<<PB1);
   PORTB |= (1<<PB1);

   //Initialize LCD
   //LCDInit(LS_BLINK|LS_ULINE);
   //LCDClear();

   //Initialize ADC
   InitADC();

   //Put some intro text into LCD
   //LCDWriteString("ADC Test");
   //LCDWriteStringXY(0,1,"ADC=");

   while(1)
   {
      adc_result=ReadADC(0);           // Read Analog value from channel-0
      //LCDWriteIntXY(4,1,adc_result,4); //Print the value in 4th column second line
	  if(adc_result < 128)
	  PORTB |= (0<<PB1);
      Wait();
   }
}